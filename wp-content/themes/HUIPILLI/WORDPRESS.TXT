==============================================
DATOS PARA CREAR UN TEMA DE WORDPRESS
==============================================



--------------------------------------------------
AGREGAR MENUS
--------------------------------------------------

function register_my_menus() {
  register_nav_menus(
    array(
      'header-menu' => __( 'Header Menu' ),
      'extra-menu' => __( 'Extra Menu' )
    )
  );
}
add_action( 'init', 'register_my_menus' );



--------------------------------------------------
AGREGAR WIDGETS 
--------------------------------------------------

function mis_widgets(){
 register_sidebar(
   array(
       'name'          => __( 'Sidebar' ),
       'id'            => 'sidebar',
       'before_widget' => '<div class="widget">',
       'after_widget'  => '</div>',
       'before_title'  => '<h3>',
       'after_title'   => '</h3>',
   )
 );
}
add_action('init','mis_widgets');



-------------------------------------------------------
INTEGRAR EL MENU EN EL HEADER.PHP
-------------------------------------------------------


<?php 
	wp_nav_menu(
		array(
			'theme_location' => 'navegation',
			'container_class' => 'top-menu',
			'items_wrap' => '<ul>%3$s</ul>',
		)
	); 
?>

<?php 
	wp_nav_menu(
		array(
			'theme_location' => 'redes-sociales',
			'container_class'   => ""
		)
	); 
?>



<?php
	wp_nav_menu(array $args = array(
	    'menu'              => "", // (int|string|WP_Term) Desired menu. Accepts a menu ID, slug, name, or object.
	    'menu_class'        => "", // (string) CSS class to use for the ul element which forms the menu. Default 'menu'.
	    'menu_id'           => "", // (string) The ID that is applied to the ul element which forms the menu. Default is the menu slug, incremented.
	    'container'         => "", // (string) Whether to wrap the ul, and what to wrap it with. Default 'div'.
	    'container_class'   => "", // (string) Class that is applied to the container. Default 'menu-{menu slug}-container'.
	    'container_id'      => "", // (string) The ID that is applied to the container.
	    'fallback_cb'       => "", // (callable|bool) If the menu doesn't exists, a callback function will fire. Default is 'wp_page_menu'. Set to false for no fallback.
	    'before'            => "", // (string) Text before the link markup.
	    'after'             => "", // (string) Text after the link markup.
	    'link_before'       => "", // (string) Text before the link text.
	    'link_after'        => "", // (string) Text after the link text.
	    'echo'              => "", // (bool) Whether to echo the menu or return it. Default true.
	    'depth'             => "", // (int) How many levels of the hierarchy are to be included. 0 means all. Default 0.
	    'walker'            => "", // (object) Instance of a custom walker class.
	    'theme_location'    => "", // (string) Theme location to be used. Must be registered with register_nav_menu() in order to be selectable by the user.
	    'items_wrap'        => "", // (string) How the list items should be wrapped. Default is a ul with an id and class. Uses printf() format with numbered placeholders.
	    'item_spacing'      => "", // (string) Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'. Default 'preserve'.
	));
?>


====================================================
PERSONALIZANDO MENUS CSS


// agregando clases a los enlaces etiqueta a 

function add_menuclass($ulclass, $args) {

	$classhref = 'e';

	if ('navegation' === $args->theme_location) {
        $classhref = 'scroll';
        
    }

   	return preg_replace('/<a /', '<a class="'.$classhref.'"', $ulclass);
}
add_filter('wp_nav_menu','add_menuclass',1,3);



// agregando clases a los elementos li del menu

function add_classes_on_li($classes, $item, $args) {

	if ('navegation' === $args->theme_location) {
        $classes[] = 'test_class';
    }
	
	return $classes;
}
add_filter('nav_menu_css_class','add_classes_on_li',1,3);